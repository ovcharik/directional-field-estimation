(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var calcAngle;

importScripts('./libs.js');

calcAngle = function(x, y) {
  var a;
  a = (-0.5 * Math.atan2(x, y)) % (2 * Math.PI);
  if (a < 0) {
    a += Math.PI;
  }
  return a / 2;
};

new Producer(self, function(data) {
  var angle, cellH, cellW, coh, gx, gy, h, i, j, k, l, len, length, m, maxL, n, o, pp, rH, rW, ref, ref1, ref2, ref3, ref4, ref5, rp, v, vx, vy, w, x, xx, xy, y, yy;
  gx = data.x;
  gy = data.y;
  w = gx.width;
  h = gx.height;
  cellW = data.cellW;
  cellH = data.cellH;
  rW = w / cellW | 1;
  rH = h / cellH | 1;
  length = new Array(rW * rH);
  angle = new Array(rW * rH);
  coh = new Array(rW * rH);
  maxL = 0;
  for (y = k = 0, ref = rH; 0 <= ref ? k < ref : k > ref; y = 0 <= ref ? ++k : --k) {
    for (x = l = 0, ref1 = rW; 0 <= ref1 ? l < ref1 : l > ref1; x = 0 <= ref1 ? ++l : --l) {
      rp = y * rW + x;
      xx = 0;
      yy = 0;
      xy = 0;
      for (i = m = ref2 = y * cellH, ref3 = (y + 1) * cellH; ref2 <= ref3 ? m < ref3 : m > ref3; i = ref2 <= ref3 ? ++m : --m) {
        for (j = n = ref4 = x * cellW, ref5 = (x + 1) * cellW; ref4 <= ref5 ? n < ref5 : n > ref5; j = ref4 <= ref5 ? ++n : --n) {
          if (i < 0 || i >= h || j < 0 || j >= w) {
            continue;
          }
          pp = i * w + j;
          vx = gx.data[4 * pp + 0];
          vy = gy.data[4 * pp + 0];
          xx += vx * vx;
          yy += vy * vy;
          xy += vx * vy;
        }
      }
      xx = xx / cellH / cellW;
      yy = yy / cellH / cellW;
      xy = xy / cellH / cellW;
      length[rp] = Math.sqrt(Math.pow(xx - yy, 2) + Math.pow(2 * xy, 2));
      if (length[rp] > maxL) {
        maxL = length[rp];
      }
      angle[rp] = calcAngle(xx - yy, 2 * xy);
      coh[rp] = Math.sqrt(Math.pow(xx - yy, 2) + 4 * xy * xy) / (xx + yy);
      if (isNaN(coh[rp])) {
        coh[rp] = 1;
      }
    }
  }
  for (i = o = 0, len = length.length; o < len; i = ++o) {
    v = length[i];
    length[i] = v / maxL;
  }
  return {
    length: length,
    angle: angle,
    coh: coh
  };
});



},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9ncnVudC1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvaG9tZS9tb3YvZGV2L2RmZS9zcmMvd29ya2Vycy9jYWxjLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBLElBQUEsU0FBQTs7QUFBQSxhQUFBLENBQWMsV0FBZCxDQUFBLENBQUE7O0FBQUEsU0FFQSxHQUFZLFNBQUMsQ0FBRCxFQUFJLENBQUosR0FBQTtBQUNWLE1BQUEsQ0FBQTtBQUFBLEVBQUEsQ0FBQSxHQUFLLENBQUMsQ0FBQSxHQUFBLEdBQU8sSUFBSSxDQUFDLEtBQUwsQ0FBVyxDQUFYLEVBQWMsQ0FBZCxDQUFSLENBQUEsR0FBNEIsQ0FBQyxDQUFBLEdBQUksSUFBSSxDQUFDLEVBQVYsQ0FBakMsQ0FBQTtBQUNBLEVBQUEsSUFBZ0IsQ0FBQSxHQUFJLENBQXBCO0FBQUEsSUFBQSxDQUFBLElBQUssSUFBSSxDQUFDLEVBQVYsQ0FBQTtHQURBO1NBRUEsQ0FBQSxHQUFJLEVBSE07QUFBQSxDQUZaLENBQUE7O0FBQUEsSUFPSSxRQUFBLENBQVMsSUFBVCxFQUFlLFNBQUMsSUFBRCxHQUFBO0FBRWpCLE1BQUEsOEpBQUE7QUFBQSxFQUFBLEVBQUEsR0FBSyxJQUFJLENBQUMsQ0FBVixDQUFBO0FBQUEsRUFDQSxFQUFBLEdBQUssSUFBSSxDQUFDLENBRFYsQ0FBQTtBQUFBLEVBR0EsQ0FBQSxHQUFJLEVBQUUsQ0FBQyxLQUhQLENBQUE7QUFBQSxFQUlBLENBQUEsR0FBSSxFQUFFLENBQUMsTUFKUCxDQUFBO0FBQUEsRUFNQSxLQUFBLEdBQVEsSUFBSSxDQUFDLEtBTmIsQ0FBQTtBQUFBLEVBT0EsS0FBQSxHQUFRLElBQUksQ0FBQyxLQVBiLENBQUE7QUFBQSxFQVNBLEVBQUEsR0FBSyxDQUFBLEdBQUksS0FBSixHQUFZLENBVGpCLENBQUE7QUFBQSxFQVVB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LENBQUEsQ0FBQSxDQUFQLEdBQVksQ0FBQSxHQUFJLElBQWhCLENBREY7QUFBQSxHQS9DQTtBQWtEQSxTQUFPO0FBQUEsSUFDTCxNQUFBLEVBQVEsTUFESDtBQUFBLElBRUwsS0FBQSxFQUFPLEtBRkY7QUFBQSxJQUdMLEdBQUEsRUFBSyxHQUhBO0dBQVAsQ0FwRGlCO0FBQUEsQ0FBZixDQVBKLENBQUEiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiaW1wb3J0U2NyaXB0cyAnLi9saWJzLmpzJ1xuXG5jYWxjQW5nbGUgPSAoeCwgeSkgLT5cbiAgYSAgPSAoLTAuNSAqIE1hdGguYXRhbjIoeCwgeSkpICUgKDIgKiBNYXRoLlBJKVxuICBhICs9IE1hdGguUEkgaWYgYSA8IDBcbiAgYSAvIDJcblxubmV3IFByb2R1Y2VyIHNlbGYsIChkYXRhKSAtPlxuXG4gIGd4ID0gZGF0YS54XG4gIGd5ID0gZGF0YS55XG5cbiAgdyA9IGd4LndpZHRoXG4gIGggPSBneC5oZWlnaHRcblxuICBjZWxsVyA9IGRhdGEuY2VsbFdcbiAgY2VsbEggPSBkYXRhLmNlbGxIXG5cbiAgclcgPSB3IC8gY2VsbFcgfCAxXG4gIHJIID0gaCAvIGNlbGxIIHwgMVxuXG4gIGxlbmd0aCA9IG5ldyBBcnJheShyVyAqIHJIKVxuICBhbmdsZSAgPSBuZXcgQXJyYXkoclcgKiBySClcbiAgY29oICAgID0gbmV3IEFycmF5KHJXICogckgpXG5cbiAgbWF4TCA9IDBcblxuICBmb3IgeSBpbiBbMCAuLi4gckhdXG4gICAgZm9yIHggaW4gWzAgLi4uIHJXXVxuICAgICAgcnAgPSB5ICogclcgKyB4XG4gICAgICB4eCA9IDBcbiAgICAgIHl5ID0gMFxuICAgICAgeHkgPSAwXG5cbiAgICAgIGZvciBpIGluIFsgeSAqIGNlbGxIIC4uLiAoeSArIDEpICogY2VsbEggXVxuICAgICAgICBmb3IgaiBpbiBbIHggKiBjZWxsVyAuLi4gKHggKyAxKSAqIGNlbGxXIF1cbiAgICAgICAgICBjb250aW51ZSBpZiBpIDwgMCB8fCBpID49IGggfHwgaiA8IDAgfHwgaiA+PSB3XG4gICAgICAgICAgcHAgPSBpICogdyArIGpcbiAgICAgICAgICB2eCA9IGd4LmRhdGFbNCAqIHBwICsgMF1cbiAgICAgICAgICB2eSA9IGd5LmRhdGFbNCAqIHBwICsgMF1cbiAgICAgICAgICB4eCArPSB2eCAqIHZ4XG4gICAgICAgICAgeXkgKz0gdnkgKiB2eVxuICAgICAgICAgIHh5ICs9IHZ4ICogdnlcblxuICAgICAgeHggPSB4eCAvIGNlbGxIIC8gY2VsbFdcbiAgICAgIHl5ID0geXkgLyBjZWxsSCAvIGNlbGxXXG4gICAgICB4eSA9IHh5IC8gY2VsbEggLyBjZWxsV1xuXG4gICAgICBsZW5ndGhbcnBdID0gTWF0aC5zcXJ0KE1hdGgucG93KHh4IC0geXksIDIpICsgTWF0aC5wb3coMiAqIHh5LCAyKSlcbiAgICAgIG1heEwgPSBsZW5ndGhbcnBdIGlmIGxlbmd0aFtycF0gPiBtYXhMXG5cbiAgICAgIGFuZ2xlW3JwXSA9IGNhbGNBbmdsZSh4eCAtIHl5LCAyICogeHkpXG5cbiAgICAgIGNvaFtycF0gPSBNYXRoLnNxcnQoIE1hdGgucG93KHh4IC0geXksIDIpICsgNCp4eSp4eSApIC8gKHh4ICsgeXkpXG4gICAgICBjb2hbcnBdID0gMSBpZiBpc05hTihjb2hbcnBdKVxuXG4gIGZvciB2LCBpIGluIGxlbmd0aFxuICAgIGxlbmd0aFtpXSA9IHYgLyBtYXhMXG5cbiAgcmV0dXJuIHtcbiAgICBsZW5ndGg6IGxlbmd0aFxuICAgIGFuZ2xlOiBhbmdsZVxuICAgIGNvaDogY29oXG4gIH1cblxuXG5cblxuXG4iXX0=
