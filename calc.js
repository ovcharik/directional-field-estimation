(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
importScripts('./libs.js');

new Producer(self, function(data) {
  var angle, cell, coh, diff, dx, dy, gsx, gsy, gx, gxx, gxy, gy, gyy, h, i, j, k, l, len, len1, length, m, max, maxC, maxL, min, minC, minL, n, o, p, pp, rH, rW, ref, ref1, ref2, ref3, ref4, ref5, ref6, rp, sobelx, sobely, v, w, x, y;
  min = function(v1, v2) {
    if (v1 < v2) {
      return v1;
    } else {
      return v2;
    }
  };
  max = function(v1, v2) {
    if (v1 > v2) {
      return v1;
    } else {
      return v2;
    }
  };
  sobelx = data.x;
  sobely = data.y;
  w = sobelx.width;
  h = sobelx.height;
  dx = sobelx.data;
  dy = sobely.data;
  cell = data.cell;
  rW = Math.floor(w / cell);
  rH = Math.floor(h / cell);
  length = new Float32Array(rW * rH);
  angle = new Float32Array(rW * rH);
  coh = new Float32Array(rW * rH);
  minL = Infinity;
  maxL = -Infinity;
  minC = Infinity;
  maxC = -Infinity;
  for (y = k = 0, ref = rH; 0 <= ref ? k < ref : k > ref; y = 0 <= ref ? ++k : --k) {
    for (x = l = 0, ref1 = rW; 0 <= ref1 ? l < ref1 : l > ref1; x = 0 <= ref1 ? ++l : --l) {
      rp = y * rW + x;
      ref2 = [0, 0, 0, 0, 0], gxx = ref2[0], gyy = ref2[1], gxy = ref2[2], gsx = ref2[3], gsy = ref2[4];
      for (i = m = ref3 = y * cell, ref4 = (y + 1) * cell; ref3 <= ref4 ? m < ref4 : m > ref4; i = ref3 <= ref4 ? ++m : --m) {
        for (j = n = ref5 = x * cell, ref6 = (x + 1) * cell; ref5 <= ref6 ? n < ref6 : n > ref6; j = ref5 <= ref6 ? ++n : --n) {
          pp = i * w + j;
          gx = dx[pp];
          gy = dy[pp];
          gxx += gx * gx;
          gyy += gy * gy;
          gxy += gx * gy;
          gsx += gx * gx - gy * gy;
          gsy += 2 * gx * gy;
        }
      }
      angle[rp] = (-0.5 * Math.atan2(gsy, gsx)) % (2 * Math.PI) + Math.PI / 2;
      length[rp] = Math.sqrt(gsx * gsx + gsy * gsy);
      minL = min(minL, length[rp]);
      maxL = max(maxL, length[rp]);
      diff = gxx - gyy;
      coh[rp] = Math.sqrt(diff * diff + 4 * gxy * gxy) / (gxx + gyy);
      minC = min(minC, coh[rp]);
      maxC = max(maxC, coh[rp]);
    }
  }
  maxL -= minL;
  for (i = o = 0, len = length.length; o < len; i = ++o) {
    v = length[i];
    length[i] = (v - minL) / maxL;
  }
  maxC -= minC;
  for (i = p = 0, len1 = coh.length; p < len1; i = ++p) {
    v = coh[i];
    coh[i] = (v - minC) / maxC;
  }
  return {
    length: length,
    angle: angle,
    coh: coh
  };
});



},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9ncnVudC1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvaG9tZS9tb3YvZGV2L2RmZS9zcmMvd29ya2Vycy9jYWxjLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBLGFBQUEsQ0FBYyxXQUFkLENBQUEsQ0FBQTs7QUFBQSxJQUVJLFFBQUEsQ0FBUyxJQUFULEVBQWUsU0FBQyxJQUFELEdBQUE7QUFFakIsTUFBQSxvT0FBQTtBQUFBLEVBQUEsR0FBQSxHQUFNLFNBQUMsRUFBRCxFQUFLLEVBQUwsR0FBQTtBQUFZLElBQUEsSUFBSSxFQUFBLEdBQUssRUFBVDthQUFrQixHQUFsQjtLQUFBLE1BQUE7YUFBMEIsR0FBMUI7S0FBWjtFQUFBLENBQU4sQ0FBQTtBQUFBLEVBQ0EsR0FBQSxHQUFNLFNBQUMsRUFBRCxFQUFLLEVBQUwsR0FBQTtBQUFZLElBQUEsSUFBSSxFQUFBLEdBQUssRUFBVDthQUFrQixHQUFsQjtLQUFBLE1BQUE7YUFBMEIsR0FBMUI7S0FBWjtFQUFBLENBRE4sQ0FBQTtBQUFBLEVBR0EsTUFBQSxHQUFTLElBQUksQ0FBQyxDQUhkLENBQUE7QUFBQSxFQUlBLE1BQUEsR0FBUyxJQUFJLENBQUMsQ0FKZCxDQUFBO0FBQUEsRUFNQSxDQUFBLEdBQUksTUFBTSxDQUFDLEtBTlgsQ0FBQTtBQUFBLEVBT0EsQ0FBQSxHQUFJLE1BQU0sQ0FBQyxNQVBYLENBQUE7QUFBQSxFQVNBLEVBQUEsR0FBSyxNQUFNLENBQUMsSUFUWixDQUFBO0FBQUEsRUFVQSxFQUFBLEdBQUssTUFBTSxDQUFDLElBVlosQ0FBQTtBQUFBLEVBWUEsSUFBQSxHQUFPLElBQUksQ0FBQyxJQVpaLENBQUE7QUFBQSxFQWNBLEVBQUEsR0FBSyxJQUFJLENBQUMsS0FBTCxDQUFXLENBQUEsR0FBSSxJQUFmLENBZEwsQ0FBQTtBQUFBLEVBZUEsRUFB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QUEsS0FERjtBQUFBLEdBM0JBO0FBQUEsRUF3REEsSUFBQSxJQUFRLElBeERSLENBQUE7QUF5REEsT0FBQSxnREFBQTtrQkFBQTtBQUFBLElBQUEsTUFBTyxDQUFBLENBQUEsQ0FBUCxHQUFZLENBQUMsQ0FBQSxHQUFJLElBQUwsQ0FBQSxHQUFhLElBQXpCLENBQUE7QUFBQSxHQXpEQTtBQUFBLEVBNERBLElBQUEsSUFBUSxJQTVEUixDQUFBO0FBNkRBLE9BQUEsK0NBQUE7ZUFBQTtBQUFBLElBQUEsR0FBSSxDQUFBLENBQUEsQ0FBSixHQUFTLENBQUMsQ0FBQSxHQUFJLElBQUwsQ0FBQSxHQUFhLElBQXRCLENBQUE7QUFBQSxHQTdEQTtTQStEQTtBQUFBLElBQ0UsTUFBQSxFQUFRLE1BRFY7QUFBQSxJQUVFLEtBQUEsRUFBTyxLQUZUO0FBQUEsSUFHRSxHQUFBLEVBQUssR0FIUDtJQWpFaUI7QUFBQSxDQUFmLENBRkosQ0FBQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJpbXBvcnRTY3JpcHRzICcuL2xpYnMuanMnXG5cbm5ldyBQcm9kdWNlciBzZWxmLCAoZGF0YSkgLT5cblxuICBtaW4gPSAodjEsIHYyKSAtPiBpZiAodjEgPCB2MikgdGhlbiB2MSBlbHNlIHYyXG4gIG1heCA9ICh2MSwgdjIpIC0+IGlmICh2MSA+IHYyKSB0aGVuIHYxIGVsc2UgdjJcblxuICBzb2JlbHggPSBkYXRhLnhcbiAgc29iZWx5ID0gZGF0YS55XG5cbiAgdyA9IHNvYmVseC53aWR0aFxuICBoID0gc29iZWx4LmhlaWdodFxuXG4gIGR4ID0gc29iZWx4LmRhdGFcbiAgZHkgPSBzb2JlbHkuZGF0YVxuXG4gIGNlbGwgPSBkYXRhLmNlbGxcblxuICByVyA9IE1hdGguZmxvb3IodyAvIGNlbGwpXG4gIHJIID0gTWF0aC5mbG9vcihoIC8gY2VsbClcblxuICBsZW5ndGggPSBuZXcgRmxvYXQzMkFycmF5KHJXICogckgpXG4gIGFuZ2xlICA9IG5ldyBGbG9hdDMyQXJyYXkoclcgKiBySClcbiAgY29oICAgID0gbmV3IEZsb2F0MzJBcnJheShyVyAqIHJIKVxuXG4gIG1pbkwgPSBJbmZpbml0eVxuICBtYXhMID0gLUluZmluaXR5XG5cbiAgbWluQyA9IEluZmluaXR5XG4gIG1heEMgPSAtSW5maW5pdHlcblxuICBmb3IgeSBpbiBbMCAuLi4gckhdXG4gICAgZm9yIHggaW4gWzAgLi4uIHJXXVxuICAgICAgcnAgPSB5ICogclcgKyB4XG4gICAgICBbZ3h4LCBneXksIGd4eSwgZ3N4LCBnc3ldID0gWzAsIDAsIDAsIDAsIDBdXG5cbiAgICAgIGZvciBpIGluIFsgeSAqIGNlbGwgLi4uICh5ICsgMSkgKiBjZWxsIF1cbiAgICAgICAgZm9yIGogaW4gWyB4ICogY2VsbCAuLi4gKHggKyAxKSAqIGNlbGwgXVxuICAgICAgICAgIHBwID0gaSAqIHcgKyBqXG4gICAgICAgICAgZ3ggPSBkeFtwcF1cbiAgICAgICAgICBneSA9IGR5W3BwXVxuXG4gICAgICAgICAgZ3h4ICs9IGd4ICogZ3hcbiAgICAgICAgICBneXkgKz0gZ3kgKiBneVxuICAgICAgICAgIGd4eSArPSBneCAqIGd5XG4gICAgICAgICAgZ3N4ICs9IGd4ICogZ3ggLSBneSAqIGd5XG4gICAgICAgICAgZ3N5ICs9IDIgKiBneCAqIGd5XG5cbiAgICAgIGFuZ2xlW3JwXSA9ICgtMC41ICogTWF0aC5hdGFuMihnc3ksIGdzeCkpICUgKDIgKiBNYXRoLlBJKSArIE1hdGguUEkgLyAyXG5cbiAgICAgIGxlbmd0aFtycF0gPSBNYXRoLnNxcnQoZ3N4ICogZ3N4ICsgZ3N5ICogZ3N5KVxuICAgICAgbWluTCA9IG1pbihtaW5MLCBsZW5ndGhbcnBdKVxuICAgICAgbWF4TCA9IG1heChtYXhMLCBsZW5ndGhbcnBdKVxuXG4gICAgICBkaWZmID0gZ3h4IC0gZ3l5XG4gICAgICBjb2hbcnBdID0gTWF0aC5zcXJ0KCBkaWZmICogZGlmZiArIDQgKiBneHkgKiBneHkgKSAvIChneHggKyBneXkpXG4gICAgICBtaW5DID0gbWluKG1pbkMsIGNvaFtycF0pXG4gICAgICBtYXhDID0gbWF4KG1heEMsIGNvaFtycF0pXG5cbiAgIyBsZW5ndGggbm9ybWFsaXphdGlvblxuICBtYXhMIC09IG1pbkxcbiAgbGVuZ3RoW2ldID0gKHYgLSBtaW5MKSAvIG1heEwgZm9yIHYsIGkgaW4gbGVuZ3RoXG5cbiAgIyBjb2hlcmVuY3kgbm9ybWFsaXphdGlvblxuICBtYXhDIC09IG1pbkNcbiAgY29oW2ldID0gKHYgLSBtaW5DKSAvIG1heEMgZm9yIHYsIGkgaW4gY29oXG5cbiAge1xuICAgIGxlbmd0aDogbGVuZ3RoXG4gICAgYW5nbGU6IGFuZ2xlXG4gICAgY29oOiBjb2hcbiAgfVxuXG5cblxuXG5cbiJdfQ==
