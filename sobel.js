(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var xKernel, yKernel;

importScripts('./libs.js');

xKernel = [[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]];

yKernel = [[-1, -2, -1], [0, 0, 0], [1, 2, 1]];

new Producer(self, function(data) {
  var h, i, img, j, k, l, m, n, p, px, py, ref, ref1, rx, rxy, ry, v, w, x, y;
  img = data.imageData;
  w = img.width;
  h = img.height;
  rx = new Array(w * h);
  ry = new Array(w * h);
  rxy = new Array(w * h);
  for (y = k = 0, ref = h; 0 <= ref ? k < ref : k > ref; y = 0 <= ref ? ++k : --k) {
    for (x = l = 0, ref1 = w; 0 <= ref1 ? l < ref1 : l > ref1; x = 0 <= ref1 ? ++l : --l) {
      p = y * w + x;
      rx[p] = 0;
      ry[p] = 0;
      for (i = m = -1; m <= 1; i = ++m) {
        for (j = n = -1; n <= 1; j = ++n) {
          py = _.max([0, _.min([h - 1, y + i])]);
          px = _.max([0, _.min([w - 1, x + j])]);
          v = img.data[4 * (py * w + px)] / 255;
          rx[p] += v * xKernel[i + 1][j + 1];
          ry[p] += v * yKernel[i + 1][j + 1];
        }
      }
      if (rx[p] !== 0 && ry[p] !== 0 && rx[p] === ry[p]) {
        rx[p] += _.random(-1, 1) * 0.1;
      }
      rxy[p] = Math.sqrt(rx[p] * rx[p] + ry[p] * ry[p]);
    }
  }
  return {
    x: {
      width: w,
      height: h,
      data: rx
    },
    y: {
      width: w,
      height: h,
      data: ry
    }
  };
});



},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9ncnVudC1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvaG9tZS9tb3YvZGV2L2RmZS9zcmMvd29ya2Vycy9zb2JlbC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQSxJQUFBLGdCQUFBOztBQUFBLGFBQUEsQ0FBYyxXQUFkLENBQUEsQ0FBQTs7QUFBQSxPQUVBLEdBQVUsQ0FDUixDQUFDLENBQUEsQ0FBRCxFQUFLLENBQUwsRUFBUSxDQUFSLENBRFEsRUFFUixDQUFDLENBQUEsQ0FBRCxFQUFLLENBQUwsRUFBUSxDQUFSLENBRlEsRUFHUixDQUFDLENBQUEsQ0FBRCxFQUFLLENBQUwsRUFBUSxDQUFSLENBSFEsQ0FGVixDQUFBOztBQUFBLE9BUUEsR0FBVSxDQUNSLENBQUMsQ0FBQSxDQUFELEVBQUssQ0FBQSxDQUFMLEVBQVMsQ0FBQSxDQUFULENBRFEsRUFFUixDQUFFLENBQUYsRUFBTSxDQUFOLEVBQVUsQ0FBVixDQUZRLEVBR1IsQ0FBRSxDQUFGLEVBQU0sQ0FBTixFQUFVLENBQVYsQ0FIUSxDQVJWLENBQUE7O0FBQUEsSUFjSSxRQUFBLENBQVMsSUFBVCxFQUFlLFNBQUMsSUFBRCxHQUFBO0FBRWpCLE1BQUEsdUVBQUE7QUFBQSxFQUFBLEdBQUEsR0FBTyxJQUFJLENBQUMsU0FBWixDQUFBO0FBQUEsRUFFQSxDQUFBLEdBQUksR0FBRyxDQUFDLEtBRlIsQ0FBQTtBQUFBLEVBR0EsQ0FBQSxHQUFJLEdBQUcsQ0FBQyxNQUhSLENBQUE7QUFBQSxFQVNBLEVBQUEsR0FBUyxJQUFBLEtBQUEsQ0FBTSxDQUFBLEdBQUksQ0FBVixDQVRULENBQUE7QUFBQSxFQVVBLEVBQUEsR0FBUyxJQUFBLEtBQUEsQ0FBTSxDQUFBLEdBQUksQ0FBVixDQVZULENBQUE7QUFBQSxFQVdBLEdBQUEsR0FBVSxJQUFBLEtBQUEsQ0FBTSxDQUFBLEdBQUksQ0FBVixDQVhWLENBQUE7QUFhQSxPQUFTLDBFQUFULEdBQUE7QUFDRSxTQUFTLCtFQUFULEdBQUE7QUFDRSxNQUFBLENBQUEsR0FBSSxDQUFBLEdBQUksQ0FBSixHQUFRLENBQVosQ0FBQTtBQUFBLE1BQ0EsRUFBRyxDQUFBLENBQUEsQ0FBSCxHQUFRLENBRFIsQ0FBQTtBQUFBLE1BRUEsRUFBRyxDQUFBLENBQUEsQ0FBSCxHQUFRLENBRlIsQ0FBQTtBQUlBLFdBQVMsMkJBQVQsR0FBQTtBQUNFLGFBQVMsMkJBQVQsR0FBQTtBQUNFLFVBQUEsRUFBQSxHQUFLLENBQUMsQ0FBQyxHQUFGLENBQU0sQ0FBRSxDQUFGLEVBQUssQ0FBQyxDQUFDLEdBQUYsQ0FBTSxDQUFDLENBQUEsR0FBRSxDQUFILEVBQU0sQ0FBQSxHQUFFLENBQVIsQ0FBTixDQUFMLENBQU4sQ0FBTCxDQUFBO0FBQUEsVUFDQSxFQUFBLEdBQUssQ0FBQyxDQUFDLEdBQUYsQ0FBTSxDQUFFLENBQUYsRUFBSyxDQUFDLENBQUMsR0FBRixDQUFNLENBQUMsQ0FBQSxHQUFFLENBQUgsRUFBTSxDQUFBLEdBQUUsQ0FBUixDQUFOLENBQUwsQ0FBTixDQURMLENBQUE7QUFBQSxVQUVBLENBQUEsR0FBSSxHQUFHLENBQUMsSUFBTSxDQUFBLENBQUEsR0FBSSxDQUFDLEVBQUEsR0FBSyxDQUFMLEdBQVMsRUFBVixDQUFKLENBQVYsR0FBZ0MsR0FGcEMsQ0FBQTtBQUFBLFVBR0EsRUFBRyxDQUFBLENBQUEsQ0FBSCxJQUFTLENBQUEsR0FBSSxPQUFRLENBQUEsQ0FBQSxHQUFJLENBQUosQ0FBTyxDQUFBLENBQUEsR0FBSSxDQUFKLENBSDVCLENBQUE7QUFBQSxVQUlBLEVBQUcsQ0FBQSxDQUFBLENBQUgsSUFBUyxDQUFBLEdBQUksT0FBUSxDQUFBLENBQUEsR0FBSSxDQUFKLENBQU8sQ0FBQSxDQUFBLEdBQUksQ0FBSixDQUo1QixDQURGO0FBQUEsU0FERjtBQUFBLE9BSkE7QUFZQSxNQUFBLElBQUcsRUFBRyxDQUFBLENBQUEsQ0FBSCxLQUFTLENBQVQsSUFBZSxFQUFHLENBQUEsQ0FBQSxDQUFILEtBQVMsQ0FBeEIsSUFBOEIsRUFBRyxDQUFBLENBQUEsQ0FBSCxLQUFTLEVBQUcsQ0FBQSxDQUFBLENBQTdDO0FBQ0UsUUFBQSxFQUFHLENBQUEsQ0FBQSxDQUFILElBQVMsQ0FBQyxDQUFDLE1BQUYsQ0FBUyxDQUFBLENBQVQsRUFBYSxDQUFiLENBQUEsR0FBa0IsR0FBM0IsQ0FERjtPQVpBO0FBQUEsTUFlQSxHQUFJLENBQUEsQ0FBQSxDQUFKLEdBQVMsSUFBSSxDQUFDLElBQUwsQ0FBVSxFQUFHLENBQUEsQ0FBQSxDQUFILEdBQVEsRUFBRyxDQUFBLENBQUEsQ0FBWCxHQUFnQixFQUFHLENBQUEsQ0FBQSxDQUFILEdBQVEsRUFBRyxDQUFBLENBQUEsQ0FBckMsQ0FmVCxDQURGO0FBQUEsS0FERjtBQUFBLEdBYkE7QUFzRUEsU0FBTztBQUFBLElBQ0wsQ0FBQSxFQUNFO0FBQUEsTUFBQSxLQUFBLEVBQU8sQ0FBUDtBQUFBLE1BQ0EsTUFBQSxFQUFRLENBRFI7QUFBQSxNQUVBLElBQUEsRUFBTSxFQUZOO0tBRkc7QUFBQSxJQUtMLENBQUEsRUFDRTtBQUFBLE1BQUEsS0FBQSxFQUFPLENBQVA7QUFBQSxNQUNBLE1BQUEsRUFBUSxDQURSO0FBQUEsTUFFQSxJQUFBLEVBQU0sRUFGTjtLQU5HO0dBQVAsQ0F4RWlCO0FBQUEsQ0FBZixDQWRKLENBQUEiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiaW1wb3J0U2NyaXB0cyAnLi9saWJzLmpzJ1xuXG54S2VybmVsID0gW1xuICBbLTEsIDAsIDFdXG4gIFstMiwgMCwgMl1cbiAgWy0xLCAwLCAxXVxuXVxuXG55S2VybmVsID0gW1xuICBbLTEsIC0yLCAtMV1cbiAgWyAwLCAgMCwgIDBdXG4gIFsgMSwgIDIsICAxXVxuXVxuXG5uZXcgUHJvZHVjZXIgc2VsZiwgKGRhdGEpIC0+XG5cbiAgaW1nICA9IGRhdGEuaW1hZ2VEYXRhXG5cbiAgdyA9IGltZy53aWR0aFxuICBoID0gaW1nLmhlaWdodFxuXG4gICMgW21pblggLCBtYXhZIF0gPSBbSW5maW5pdHksIC1JbmZpbml0eV1cbiAgIyBbbWluWSAsIG1heFkgXSA9IFtJbmZpbml0eSwgLUluZmluaXR5XVxuICAjIFttaW5YWSwgbWF4WFldID0gW0luZmluaXR5LCAtSW5maW5pdHldXG5cbiAgcnggPSBuZXcgQXJyYXkodyAqIGgpXG4gIHJ5ID0gbmV3IEFycmF5KHcgKiBoKVxuICByeHkgPSBuZXcgQXJyYXkodyAqIGgpXG5cbiAgZm9yIHkgaW4gWzAgLi4uIGhdXG4gICAgZm9yIHggaW4gWzAgLi4uIHddXG4gICAgICBwID0geSAqIHcgKyB4XG4gICAgICByeFtwXSA9IDBcbiAgICAgIHJ5W3BdID0gMFxuXG4gICAgICBmb3IgaSBpbiBbLTEgLi4gMV1cbiAgICAgICAgZm9yIGogaW4gWy0xIC4uIDFdXG4gICAgICAgICAgcHkgPSBfLm1heCBbIDAsIF8ubWluKFtoLTEsIHkraV0pIF1cbiAgICAgICAgICBweCA9IF8ubWF4IFsgMCwgXy5taW4oW3ctMSwgeCtqXSkgXVxuICAgICAgICAgIHYgPSBpbWcuZGF0YVsgNCAqIChweSAqIHcgKyBweCkgXSAvIDI1NVxuICAgICAgICAgIHJ4W3BdICs9IHYgKiB4S2VybmVsW2kgKyAxXVtqICsgMV1cbiAgICAgICAgICByeVtwXSArPSB2ICogeUtlcm5lbFtpICsgMV1baiArIDFdXG5cbiAgICAgIGlmIHJ4W3BdICE9IDAgYW5kIHJ5W3BdICE9IDAgYW5kIHJ4W3BdID09IHJ5W3BdXG4gICAgICAgIHJ4W3BdICs9IF8ucmFuZG9tKC0xLCAxKSAqIDAuMVxuXG4gICAgICByeHlbcF0gPSBNYXRoLnNxcnQocnhbcF0gKiByeFtwXSArIHJ5W3BdICogcnlbcF0pXG5cbiAgIyAgICAgbWluWCA9IHJ4W3BdIGlmIHJ4W3BdIDwgbWluWFxuICAjICAgICBtYXhYID0gcnhbcF0gaWYgcnhbcF0gPiBtaW5YXG5cbiAgIyAgICAgbWluWSA9IHJ5W3BdIGlmIHJ5W3BdIDwgbWluWVxuICAjICAgICBtYXhZID0gcnlbcF0gaWYgcnlbcF0gPiBtaW5ZXG5cbiAgIyAgICAgbWluWFkgPSByeHlbcF0gaWYgcnh5W3BdIDwgbWluWFlcbiAgIyAgICAgbWF4WFkgPSByeHlbcF0gaWYgcnh5W3BdID4gbWluWFlcblxuICAjIGRhdGFYICA9IG5ldyBVaW50OENsYW1wZWRBcnJheSh3ICogaCAqIDQpXG4gICMgZGF0YVkgID0gbmV3IFVpbnQ4Q2xhbXBlZEFycmF5KHcgKiBoICogNClcbiAgIyBkYXRhWFkgPSBuZXcgVWludDhDbGFtcGVkQXJyYXkodyAqIGggKiA0KVxuXG4gICMgbWF4WCAgLT0gbWluWFxuICAjIG1heFkgIC09IG1pbllcbiAgIyBtYXhYWSAtPSBtaW5YWVxuXG5cbiAgIyBmb3IgaSBpbiBbMCAuLi4gdyAqIGhdXG4gICMgICB4ID0gTWF0aC5mbG9vciggKHJ4W2ldIC0gbWluWCkgLyBtYXhYICogMjU1KVxuICAjICAgZGF0YVhbaSAqIDQgKyAwXSA9IHhcbiAgIyAgIGRhdGFYW2kgKiA0ICsgMV0gPSB4XG4gICMgICBkYXRhWFtpICogNCArIDJdID0geFxuICAjICAgZGF0YVhbaSAqIDQgKyAzXSA9IDI1NVxuXG4gICMgICB5ID0gTWF0aC5mbG9vciggKHJ5W2ldIC0gbWluWSkgLyBtYXhZICogMjU1KVxuICAjICAgZGF0YVlbaSAqIDQgKyAwXSA9IHlcbiAgIyAgIGRhdGFZW2kgKiA0ICsgMV0gPSB5XG4gICMgICBkYXRhWVtpICogNCArIDJdID0geVxuICAjICAgZGF0YVlbaSAqIDQgKyAzXSA9IDI1NVxuXG4gICMgICB4eSA9IE1hdGguZmxvb3IoIChyeHlbaV0gLSBtaW5YWSkgLyBtYXhYWSAqIDI1NSlcbiAgIyAgIGRhdGFYWVtpICogNCArIDBdID0geHlcbiAgIyAgIGRhdGFYWVtpICogNCArIDFdID0geHlcbiAgIyAgIGRhdGFYWVtpICogNCArIDJdID0geHlcbiAgIyAgIGRhdGFYWVtpICogNCArIDNdID0gMjU1XG5cblxuICByZXR1cm4ge1xuICAgIHg6XG4gICAgICB3aWR0aDogd1xuICAgICAgaGVpZ2h0OiBoXG4gICAgICBkYXRhOiByeFxuICAgIHk6XG4gICAgICB3aWR0aDogd1xuICAgICAgaGVpZ2h0OiBoXG4gICAgICBkYXRhOiByeVxuXG4gICAgIyBpbWFnZVggOiBuZXcgSW1hZ2VEYXRhKGRhdGFYICwgdywgaClcbiAgICAjIGltYWdlWSA6IG5ldyBJbWFnZURhdGEoZGF0YVkgLCB3LCBoKVxuICAgICMgaW1hZ2VYWTogbmV3IEltYWdlRGF0YShkYXRhWFksIHcsIGgpXG4gIH1cbiJdfQ==
